{"version":3,"file":"main.js","mappings":"mBAAA,MAAMA,EAAmBC,SAASC,cAAc,WAC1CC,EAAWF,SAASC,cAAc,0BAClCE,EAAgC,IAAID,EAASE,UAC7CC,EAAYL,SAASC,cAAc,eAAeK,YAClDC,EAAeC,KAAKC,MAAMP,EAASI,YAAcD,GACvDK,QAAQC,IAAIJ,GACZG,QAAQC,IAAIT,GACZQ,QAAQC,IAAI,MAEZ,MAAMC,EAAwBL,EAAeF,EAAY,GAAKE,EAI9D,IAGIM,EAHAC,GAAa,EACbC,EAAkB,KAClBC,EAAqB,KAGzB,MAAMC,EAAW,KAEfJ,EAAkBK,YAAW,KAC3BhB,EAASiB,YAAcd,EAAY,CAAC,GACnC,KAAK,EAEVY,IAGAd,EACGiB,OAAOb,GACPc,UACAC,SAASC,GAASrB,EAASsB,mBAAmB,aAAcD,EAAKE,aAEpEtB,EACGiB,MAAM,EAAGb,GACTe,SAASC,GAASrB,EAASsB,mBAAmB,YAAaD,EAAKE,aAEnE,MAAMC,EAA+B,IAAIxB,EAASE,UAGlD,SAASuB,EAAUC,GAEjBlB,QAAQC,IAAIiB,GACZd,GAAa,EACbC,EAAkBa,EAAEC,QAAQ,GAAGC,MAC/Bd,EAAqBd,EAASiB,WAC9BjB,EAAS6B,UAAUC,IAAI,YACvBN,EAA6BJ,SAASW,GACpCA,EAAMF,UAAUG,OAAO,cAE3B,CAEA,SAASC,EAASP,GACXd,IACLJ,QAAQC,IAAIiB,EAAG,QAGf1B,EAASiB,WACPH,GAAsBY,EAAEC,QAAQ,GAAGC,MAAQf,GAI/C,CAEA,SAASqB,IACPtB,GAAa,EACbZ,EAAS6B,UAAUG,OAAO,YAC1BxB,QAAQC,IAAI,MACd,CAEA,SAAS0B,IAEqB,IAAxBnC,EAASiB,aACXjB,EAAS6B,UAAUC,IAAI,iBAEvB9B,EAASiB,WAAajB,EAASoC,YAAc,EAAI1B,EAAwB,GAEzEV,EAAS6B,UAAUG,OAAO,kBAIxBhC,EAASiB,aAAejB,EAASoC,YAAcpC,EAASI,cAC1DJ,EAAS6B,UAAUC,IAAI,iBAEvB9B,EAASiB,WACPP,GACCA,EAAwBV,EAASI,YAAc,IAKlDJ,EAAS6B,UAAUG,OAAO,kBAI5BK,aAAa1B,GAIVd,EAAiByC,QAAQ,YACzBzC,EAAiByC,QAAQ,WAE1BvB,GAEJ,CAGEf,EAASuC,iBAAiB,YAAaN,GACvCjC,EAASuC,iBAAiB,aAAcd,GACxCzB,EAASuC,iBAAiB,WAAYL,GACtClC,EAASuC,iBAAiB,SAAUJ,E","sources":["webpack://personal-portfolio/./src/skills.js"],"sourcesContent":["const sectionContainer = document.querySelector(\".skills\");\nconst carousel = document.querySelector(\".skills-icons-carousel\");\nconst carouselChildrenBeforeInserts = [...carousel.children];\nconst cardWidth = document.querySelector(\".skill-card\").offsetWidth;\nconst cardsPerView = Math.round(carousel.offsetWidth / cardWidth);\nconsole.log(cardsPerView);\nconsole.log(carousel);\nconsole.log(\"hi\");\n\nconst initialScrollPosition = cardsPerView * cardWidth + 10 * cardsPerView;\n\n// carousel.scrollLeft = initialScrollPosition;\n\nlet isDragging = false;\nlet startingCursorX = null;\nlet startingScrollLeft = null;\nlet carouselTimeout;\n\nconst autoPlay = () => {\n  // automove the carousel one card width + gap px after timer ends\n  carouselTimeout = setTimeout(() => {\n    carousel.scrollLeft += cardWidth + 9;\n  }, 2500);\n};\nautoPlay();\n\n// copy the last few cards from the end to the beginning of the carousel\ncarouselChildrenBeforeInserts\n  .slice(-cardsPerView)\n  .reverse()\n  .forEach((card) => carousel.insertAdjacentHTML(\"afterbegin\", card.outerHTML));\n// copy the first few cards from the beginning to the end of the carousel\ncarouselChildrenBeforeInserts\n  .slice(0, cardsPerView)\n  .forEach((card) => carousel.insertAdjacentHTML(\"beforeend\", card.outerHTML));\n\nconst carouselChildrenAfterInserts = [...carousel.children];\n// const initialScrollPosition = carousel.scrollLeft;\n\nfunction dragStart(e) {\n  // records initial cursor position and scroll position of the carousel\n  console.log(e);\n  isDragging = true;\n  startingCursorX = e.touches[0].pageX;\n  startingScrollLeft = carousel.scrollLeft;\n  carousel.classList.add(\"dragging\");\n  carouselChildrenAfterInserts.forEach((skill) =>\n    skill.classList.remove(\"untouched\")\n  );\n}\n\nfunction dragging(e) {\n  if (!isDragging) return;\n  console.log(e, \"drag\");\n\n  // updates scroll position of carousel based on cursor movement\n  carousel.scrollLeft =\n    startingScrollLeft - (e.touches[0].pageX - startingCursorX);\n\n  // scroll position = initial scroll position - (dragging cursor position - initial cursor position)\n  // 0   = 0 - (x - 203)\n}\n\nfunction dragEnd() {\n  isDragging = false;\n  carousel.classList.remove(\"dragging\");\n  console.log(\"end\");\n}\n\nfunction infiniteScroll() {\n  // if the left end of the carousel is reached\n  if (carousel.scrollLeft === 0) {\n    carousel.classList.add(\"no-transition\");\n\n    carousel.scrollLeft = carousel.scrollWidth - 2 * initialScrollPosition + 10;\n\n    carousel.classList.remove(\"no-transition\");\n  }\n\n  // if the right end of the carousel is reached\n  if (carousel.scrollLeft === carousel.scrollWidth - carousel.offsetWidth) {\n    carousel.classList.add(\"no-transition\");\n\n    carousel.scrollLeft =\n      initialScrollPosition +\n      (initialScrollPosition - carousel.offsetWidth - 10);\n\n    // carousel.scrollLeft =\n    //   initialScrollPosition + cardWidth + (cardsPerView - 1) * 10;\n\n    carousel.classList.remove(\"no-transition\");\n  }\n\n  // cancel existing timeout while scrolling\n  clearTimeout(carouselTimeout);\n\n  // autoplay carousel not being hovered over or focused by user\n  if (\n    !sectionContainer.matches(\":active\") ||\n    !sectionContainer.matches(\":hover\")\n  )\n    autoPlay();\n  // if (!sectionContainer.matches(\"dragging\")) autoPlay();\n}\n\nfunction animateCarousel() {\n  carousel.addEventListener(\"touchmove\", dragging);\n  carousel.addEventListener(\"touchstart\", dragStart);\n  carousel.addEventListener(\"touchend\", dragEnd);\n  carousel.addEventListener(\"scroll\", infiniteScroll);\n}\n\nexport default animateCarousel;\n"],"names":["sectionContainer","document","querySelector","carousel","carouselChildrenBeforeInserts","children","cardWidth","offsetWidth","cardsPerView","Math","round","console","log","initialScrollPosition","carouselTimeout","isDragging","startingCursorX","startingScrollLeft","autoPlay","setTimeout","scrollLeft","slice","reverse","forEach","card","insertAdjacentHTML","outerHTML","carouselChildrenAfterInserts","dragStart","e","touches","pageX","classList","add","skill","remove","dragging","dragEnd","infiniteScroll","scrollWidth","clearTimeout","matches","addEventListener"],"sourceRoot":""}