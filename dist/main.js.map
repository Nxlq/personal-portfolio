{"version":3,"file":"main.js","mappings":"mBAAA,MAAMA,EAAWC,SAASC,cAAc,0BAClCC,EAAgC,IAAIH,EAASI,UAC7CC,EAAYJ,SAASC,cAAc,eAAeI,YAClDC,EAAeC,KAAKC,MAAMT,EAASM,YAAcD,GACvDK,QAAQC,IAAIJ,GACZG,QAAQC,IAAIX,GACZU,QAAQC,IAAI,MAEZ,MAAMC,EAAwBL,EAAeF,EAAY,GAAKE,EAI9D,IAAIM,GAAa,EACbC,EAAkB,KAClBC,EAAqB,KAYzBZ,EACGa,OAAOT,GACPU,UACAC,SAASC,GAASnB,EAASoB,mBAAmB,aAAcD,EAAKE,aAEpElB,EACGa,MAAM,EAAGT,GACTW,SAASC,GAASnB,EAASoB,mBAAmB,YAAaD,EAAKE,aAEnE,MAAMC,EAA+B,IAAItB,EAASI,UAGlD,SAASmB,EAAUC,GAEjBd,QAAQC,IAAIa,GACZX,GAAa,EACbC,EAAkBU,EAAEC,QAAQ,GAAGC,MAC/BX,EAAqBf,EAAS2B,WAC9B3B,EAAS4B,UAAUC,IAAI,YACvBP,EAA6BJ,SAASY,GACpCA,EAAMF,UAAUG,OAAO,cAE3B,CAEA,SAASC,EAASR,GACXX,IACLH,QAAQC,IAAIa,EAAG,QAGfxB,EAAS2B,WACPZ,GAAsBS,EAAEC,QAAQ,GAAGC,MAAQZ,GAI/C,CAEA,SAASmB,IACPpB,GAAa,EACbb,EAAS4B,UAAUG,OAAO,YAC1BrB,QAAQC,IAAI,MACd,CAEA,SAASuB,IAEqB,IAAxBlC,EAAS2B,aACX3B,EAAS4B,UAAUC,IAAI,iBAEvB7B,EAAS2B,WAAa3B,EAASmC,YAAc,EAAIvB,EAAwB,GAEzEZ,EAAS4B,UAAUG,OAAO,kBAIxB/B,EAAS2B,aAAe3B,EAASmC,YAAcnC,EAASM,cAC1DN,EAAS4B,UAAUC,IAAI,iBAEvB7B,EAAS2B,WACPf,GACCA,EAAwBZ,EAASM,YAAc,IAKlDN,EAAS4B,UAAUG,OAAO,iBAE9B,CAGE/B,EAASoC,iBAAiB,YAAaJ,GACvChC,EAASoC,iBAAiB,aAAcb,GACxCvB,EAASoC,iBAAiB,WAAYH,GACtCjC,EAASoC,iBAAiB,SAAUF,E","sources":["webpack://personal-portfolio/./src/skills.js"],"sourcesContent":["const carousel = document.querySelector(\".skills-icons-carousel\");\nconst carouselChildrenBeforeInserts = [...carousel.children];\nconst cardWidth = document.querySelector(\".skill-card\").offsetWidth;\nconst cardsPerView = Math.round(carousel.offsetWidth / cardWidth);\nconsole.log(cardsPerView);\nconsole.log(carousel);\nconsole.log(\"hi\");\n\nconst initialScrollPosition = cardsPerView * cardWidth + 10 * cardsPerView;\n\n// carousel.scrollLeft = initialScrollPosition;\n\nlet isDragging = false;\nlet startingCursorX = null;\nlet startingScrollLeft = null;\nlet carouselTimeout;\n\nconst autoPlay = () => {\n  // automove the carousel one card width + gap px after timer ends\n  carouselTimeout = setTimeout(() => {\n    carousel.scrollLeft += cardWidth + 9;\n  }, 2500);\n};\n// autoPlay();\n\n// copy the last few cards from the end to the beginning of the carousel\ncarouselChildrenBeforeInserts\n  .slice(-cardsPerView)\n  .reverse()\n  .forEach((card) => carousel.insertAdjacentHTML(\"afterbegin\", card.outerHTML));\n// copy the first few cards from the beginning to the end of the carousel\ncarouselChildrenBeforeInserts\n  .slice(0, cardsPerView)\n  .forEach((card) => carousel.insertAdjacentHTML(\"beforeend\", card.outerHTML));\n\nconst carouselChildrenAfterInserts = [...carousel.children];\n// const initialScrollPosition = carousel.scrollLeft;\n\nfunction dragStart(e) {\n  // records initial cursor position and scroll position of the carousel\n  console.log(e);\n  isDragging = true;\n  startingCursorX = e.touches[0].pageX;\n  startingScrollLeft = carousel.scrollLeft;\n  carousel.classList.add(\"dragging\");\n  carouselChildrenAfterInserts.forEach((skill) =>\n    skill.classList.remove(\"untouched\")\n  );\n}\n\nfunction dragging(e) {\n  if (!isDragging) return;\n  console.log(e, \"drag\");\n\n  // updates scroll position of carousel based on cursor movement\n  carousel.scrollLeft =\n    startingScrollLeft - (e.touches[0].pageX - startingCursorX);\n\n  // scroll position = initial scroll position - (dragging cursor position - initial cursor position)\n  // 0   = 0 - (x - 203)\n}\n\nfunction dragEnd() {\n  isDragging = false;\n  carousel.classList.remove(\"dragging\");\n  console.log(\"end\");\n}\n\nfunction infiniteScroll() {\n  // if the left end of the carousel is reached\n  if (carousel.scrollLeft === 0) {\n    carousel.classList.add(\"no-transition\");\n\n    carousel.scrollLeft = carousel.scrollWidth - 2 * initialScrollPosition + 10;\n\n    carousel.classList.remove(\"no-transition\");\n  }\n\n  // if the right end of the carousel is reached\n  if (carousel.scrollLeft === carousel.scrollWidth - carousel.offsetWidth) {\n    carousel.classList.add(\"no-transition\");\n\n    carousel.scrollLeft =\n      initialScrollPosition +\n      (initialScrollPosition - carousel.offsetWidth - 10);\n\n    // carousel.scrollLeft =\n    //   initialScrollPosition + cardWidth + (cardsPerView - 1) * 10;\n\n    carousel.classList.remove(\"no-transition\");\n  }\n}\n\nfunction animateCarousel() {\n  carousel.addEventListener(\"touchmove\", dragging);\n  carousel.addEventListener(\"touchstart\", dragStart);\n  carousel.addEventListener(\"touchend\", dragEnd);\n  carousel.addEventListener(\"scroll\", infiniteScroll);\n}\n\nexport default animateCarousel;\n"],"names":["carousel","document","querySelector","carouselChildrenBeforeInserts","children","cardWidth","offsetWidth","cardsPerView","Math","round","console","log","initialScrollPosition","isDragging","startingCursorX","startingScrollLeft","slice","reverse","forEach","card","insertAdjacentHTML","outerHTML","carouselChildrenAfterInserts","dragStart","e","touches","pageX","scrollLeft","classList","add","skill","remove","dragging","dragEnd","infiniteScroll","scrollWidth","addEventListener"],"sourceRoot":""}