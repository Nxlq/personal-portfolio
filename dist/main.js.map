{"version":3,"file":"main.js","mappings":"mBAAA,MAAMA,EAAWC,SAASC,cAAc,0BAClCC,EAAmB,IAAIH,EAASI,UAChCC,EAAYJ,SAASC,cAAc,eAAeI,YAClDC,EAAeC,KAAKC,MAAMT,EAASM,YAAcD,GACvDK,QAAQC,IAAIJ,GACZG,QAAQC,IAAIX,GACZU,QAAQC,IAAI,MAEZ,MAAMC,EAAwBL,EAAeF,EAAY,GAAKE,EAE9DP,EAASa,WAAaD,EAEtB,IAAIE,GAAa,EACbC,EAAkB,KAClBC,EAAqB,KAYzB,SAASC,EAAUC,GAEjBR,QAAQC,IAAIO,GACZJ,GAAa,EACbC,EAAkBG,EAAEC,QAAQ,GAAGC,MAC/BJ,EAAqBhB,EAASa,UAChC,CAEA,SAASQ,EAASH,GACXJ,IACLJ,QAAQC,IAAIO,EAAG,QAGflB,EAASa,WACPG,GAAsBE,EAAEC,QAAQ,GAAGC,MAAQL,GAI/C,CAEA,SAASO,IACPR,GAAa,EACbJ,QAAQC,IAAI,MACd,CAEA,SAASY,IACPb,QAAQC,IAAIX,EAASa,YACO,IAAxBb,EAASa,aACXb,EAASa,WAAab,EAASwB,YAAc,EAAIZ,EAAwB,GACzEF,QAAQC,IAAI,aAGVX,EAASa,aAAeb,EAASwB,YAAcxB,EAASM,cAC1DI,QAAQC,IAAI,aACZX,EAASa,WACPD,GACCA,EAAwBZ,EAASM,YAAc,IAEtD,CA/CAH,EACGsB,OAAOlB,GACPmB,UACAC,SAASC,GAAS5B,EAAS6B,mBAAmB,aAAcD,EAAKE,aAEpE3B,EACGsB,MAAM,EAAGlB,GACToB,SAASC,GAAS5B,EAAS6B,mBAAmB,YAAaD,EAAKE,aA2CjE9B,EAAS+B,iBAAiB,YAAaV,GACvCrB,EAAS+B,iBAAiB,aAAcd,GACxCjB,EAAS+B,iBAAiB,WAAYT,GACtCtB,EAAS+B,iBAAiB,SAAUR,E","sources":["webpack://personal-portfolio/./src/skills.js"],"sourcesContent":["const carousel = document.querySelector(\".skills-icons-carousel\");\nconst carouselChildren = [...carousel.children];\nconst cardWidth = document.querySelector(\".skill-card\").offsetWidth;\nconst cardsPerView = Math.round(carousel.offsetWidth / cardWidth);\nconsole.log(cardsPerView);\nconsole.log(carousel);\nconsole.log(\"hi\");\n\nconst initialScrollPosition = cardsPerView * cardWidth + 10 * cardsPerView;\n\ncarousel.scrollLeft = initialScrollPosition;\n\nlet isDragging = false;\nlet startingCursorX = null;\nlet startingScrollLeft = null;\n\n// copy the last few cards from the end to the beginning of the carousel\ncarouselChildren\n  .slice(-cardsPerView)\n  .reverse()\n  .forEach((card) => carousel.insertAdjacentHTML(\"afterbegin\", card.outerHTML));\n// copy the first few cards from the beginning to the end of the carousel\ncarouselChildren\n  .slice(0, cardsPerView)\n  .forEach((card) => carousel.insertAdjacentHTML(\"beforeend\", card.outerHTML));\n\nfunction dragStart(e) {\n  // records initial cursor position and scroll position of the carousel\n  console.log(e);\n  isDragging = true;\n  startingCursorX = e.touches[0].pageX;\n  startingScrollLeft = carousel.scrollLeft;\n}\n\nfunction dragging(e) {\n  if (!isDragging) return;\n  console.log(e, \"drag\");\n\n  // updates scroll position of carousel based on cursor movement\n  carousel.scrollLeft =\n    startingScrollLeft - (e.touches[0].pageX - startingCursorX);\n\n  // scroll position = initial scroll position - (dragging cursor position - initial cursor position)\n  // 0   = 0 - (x - 203)\n}\n\nfunction dragEnd() {\n  isDragging = false;\n  console.log(\"end\");\n}\n\nfunction infiniteScroll() {\n  console.log(carousel.scrollLeft);\n  if (carousel.scrollLeft === 0) {\n    carousel.scrollLeft = carousel.scrollWidth - 2 * initialScrollPosition + 10;\n    console.log(\"LEFT END\");\n  }\n\n  if (carousel.scrollLeft === carousel.scrollWidth - carousel.offsetWidth) {\n    console.log(\"RIGHT END\");\n    carousel.scrollLeft =\n      initialScrollPosition +\n      (initialScrollPosition - carousel.offsetWidth - 10);\n  }\n}\n\nfunction animateCarousel() {\n  carousel.addEventListener(\"touchmove\", dragging);\n  carousel.addEventListener(\"touchstart\", dragStart);\n  carousel.addEventListener(\"touchend\", dragEnd);\n  carousel.addEventListener(\"scroll\", infiniteScroll);\n}\n\nexport default animateCarousel;\n"],"names":["carousel","document","querySelector","carouselChildren","children","cardWidth","offsetWidth","cardsPerView","Math","round","console","log","initialScrollPosition","scrollLeft","isDragging","startingCursorX","startingScrollLeft","dragStart","e","touches","pageX","dragging","dragEnd","infiniteScroll","scrollWidth","slice","reverse","forEach","card","insertAdjacentHTML","outerHTML","addEventListener"],"sourceRoot":""}